{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { LoginContext } from './ContextProvider/Context';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Box from '@mui/material/Box';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Adminboard = () => {\n  _s();\n  const [data, setData] = useState(false);\n  const {\n    logindata,\n    setLoginData\n  } = useContext(LoginContext);\n  //console.log(logindata.ValidUserOne.email);\n  //useNavigate는 양식이 제출되거나 특정 event가 발생할 때,  url을 조작할 수 있는 interface를 제공합니다.\n  const history = useNavigate();\n  const AdminValid = async () => {\n    let token = sessionStorage.getItem(\"usersdatatoken\");\n    const res = await fetch(\"/validuser\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      }\n    });\n    //가져온 response data를 json화 하여 data에 저장합니다.\n    const data = await res.json();\n    //console.log(data.ValidUserOne.role);\n\n    if (data.status === 201 && data.ValidUserOne.role === 0) {\n      // => sessionStorage의 usersdatatoken을 가져와 확인하기 떄문에 만약 그것을 지우면 에러가 됨. \n      setLoginData(data);\n      history(\"/admin\");\n    } else {\n      history(\"/*\");\n    }\n  };\n  useEffect(() => {\n    setTimeout(() => {\n      AdminValid();\n      setData(true);\n    }, 2000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"ddd\"\n  }, void 0, false);\n};\n_s(Adminboard, \"QFvrrkzi/rI2u//RhpBw+nnP57s=\", false, function () {\n  return [useNavigate];\n});\n_c = Adminboard;\nexport default Adminboard;\nvar _c;\n$RefreshReg$(_c, \"Adminboard\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useNavigate","LoginContext","CircularProgress","Box","Adminboard","data","setData","logindata","setLoginData","history","AdminValid","token","sessionStorage","getItem","res","fetch","method","headers","json","status","ValidUserOne","role","setTimeout"],"sources":["C:/Users/ryang/OneDrive/Desktop/New Folder/capstone/BodyNSoulFirness/client/src/components/Adminboard.js"],"sourcesContent":["import React, { useContext, useEffect ,useState} from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { LoginContext } from './ContextProvider/Context';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Box from '@mui/material/Box';\r\n\r\nconst Adminboard = () => {\r\n\r\n  const [data, setData] = useState(false);\r\n\r\n  const { logindata, setLoginData } = useContext(LoginContext);\r\n  //console.log(logindata.ValidUserOne.email);\r\n   //useNavigate는 양식이 제출되거나 특정 event가 발생할 때,  url을 조작할 수 있는 interface를 제공합니다.\r\n  const history = useNavigate();\r\n\r\n  const AdminValid = async () => {\r\n    let token = sessionStorage.getItem(\"usersdatatoken\");\r\n\r\n    const res = await fetch(\"/validuser\", {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": token\r\n        }\r\n    });\r\n      //가져온 response data를 json화 하여 data에 저장합니다.\r\n      const data = await res.json();\r\n      //console.log(data.ValidUserOne.role);\r\n\r\n      if(data.status === 201 && data.ValidUserOne.role === 0){\r\n        // => sessionStorage의 usersdatatoken을 가져와 확인하기 떄문에 만약 그것을 지우면 에러가 됨. \r\n        setLoginData(data)\r\n        history(\"/admin\");\r\n      }else {\r\n          \r\n          history(\"/*\");\r\n        }\r\n      }\r\n  \r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n        AdminValid();\r\n        setData(true)\r\n    }, 2000)\r\n}, [])\r\n\r\n  return (\r\n    <>\r\n    \r\n            ddd\r\n    \r\n    \r\n\r\n</>\r\n  )\r\n}\r\nexport default Adminboard"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAC7D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,YAAY,QAAQ,2BAA2B;AACxD,OAAOC,gBAAgB,MAAM,gCAAgC;AAC7D,OAAOC,GAAG,MAAM,mBAAmB;AAAC;AAAA;AAEpC,MAAMC,UAAU,GAAG,MAAM;EAAA;EAEvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAEvC,MAAM;IAAEQ,SAAS;IAAEC;EAAa,CAAC,GAAGX,UAAU,CAACI,YAAY,CAAC;EAC5D;EACC;EACD,MAAMQ,OAAO,GAAGT,WAAW,EAAE;EAE7B,MAAMU,UAAU,GAAG,YAAY;IAC7B,IAAIC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,gBAAgB,CAAC;IAEpD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;MAClCC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEN;MACrB;IACJ,CAAC,CAAC;IACA;IACA,MAAMN,IAAI,GAAG,MAAMS,GAAG,CAACI,IAAI,EAAE;IAC7B;;IAEA,IAAGb,IAAI,CAACc,MAAM,KAAK,GAAG,IAAId,IAAI,CAACe,YAAY,CAACC,IAAI,KAAK,CAAC,EAAC;MACrD;MACAb,YAAY,CAACH,IAAI,CAAC;MAClBI,OAAO,CAAC,QAAQ,CAAC;IACnB,CAAC,MAAK;MAEFA,OAAO,CAAC,IAAI,CAAC;IACf;EACF,CAAC;EAGLX,SAAS,CAAC,MAAM;IACdwB,UAAU,CAAC,MAAM;MACbZ,UAAU,EAAE;MACZJ,OAAO,CAAC,IAAI,CAAC;IACjB,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAEJ,oBACE;IAAA,UAAE;EAMN,iBAAG;AAEH,CAAC;AAAA,GAlDKF,UAAU;EAAA,QAOEJ,WAAW;AAAA;AAAA,KAPvBI,UAAU;AAmDhB,eAAeA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}