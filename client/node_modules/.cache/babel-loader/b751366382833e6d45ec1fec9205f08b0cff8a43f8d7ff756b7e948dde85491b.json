{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryang\\\\OneDrive\\\\Desktop\\\\selfMern\\\\client\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { LoginContext } from './ContextProvider/Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    logindata,\n    setLoginData\n  } = useContext(LoginContext);\n  //console.log(logindata.ValidUserOne.email);\n  //useNavigate는 양식이 제출되거나 특정 event가 발생할 때,  url을 조작할 수 있는 interface를 제공합니다.\n  const history = useNavigate();\n  const DashboardValid = async () => {\n    let token = localStorage.getItem('usersdatatoken');\n    //console.log(token);\n    const res = await fetch(\"/validuser\", {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      }\n    });\n\n    //가져온 response data를 json화 하여 data에 저장합니다.\n    const data = await res.json();\n    console.log(data);\n    if (data.status === 401 || !data) {\n      console.log(\"error page redirect\"); // => localStorage의 usersdatatoken을 가져와 확인하기 떄문에 만약 그것을 지우면 에러가 됨. \n      history(\"*\");\n    } else {\n      //즉 이곳은 user 가 웹사이트에 로그인 되어있고 뿐만아니라 verify 됬다는것을 의미 하여 setLoginData를 사용하여 현재의 logindata <- data를 집어넣어 줍니다.\n      console.log(\"user verified\");\n      setLoginData(data);\n      history(\"/dash\");\n    }\n  };\n  useEffect(() => {\n    DashboardValid();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"./man.png\",\n        style: {\n          width: \"200px\",\n          marginTop: 20\n        },\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"User Email: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(Dashboard, \"UPLQPE5ItUUxzpgaaZvl/XLw2rw=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useNavigate","LoginContext","Dashboard","logindata","setLoginData","history","DashboardValid","token","localStorage","getItem","res","fetch","method","headers","data","json","console","log","status","display","flexDirection","alignItems","width","marginTop"],"sources":["C:/Users/ryang/OneDrive/Desktop/selfMern/client/src/components/Dashboard.js"],"sourcesContent":["import React, { useContext, useEffect ,useState} from 'react'\r\nimport {useNavigate} from 'react-router-dom';\r\nimport { LoginContext } from './ContextProvider/Context';\r\n\r\nconst Dashboard = () => {\r\n\r\n  const { logindata, setLoginData } = useContext(LoginContext);\r\n  //console.log(logindata.ValidUserOne.email);\r\n   //useNavigate는 양식이 제출되거나 특정 event가 발생할 때,  url을 조작할 수 있는 interface를 제공합니다.\r\n  const history = useNavigate();\r\n\r\n  const DashboardValid = async() => {\r\n      let token = localStorage.getItem('usersdatatoken');\r\n      //console.log(token);\r\n      const res = await fetch(\"/validuser\", {\r\n        method: 'GET',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": token\r\n        }\r\n      });\r\n\r\n      //가져온 response data를 json화 하여 data에 저장합니다.\r\n      const data = await res.json();\r\n      console.log(data);\r\n\r\n      if(data.status === 401 || !data){\r\n        console.log(\"error page redirect\")// => localStorage의 usersdatatoken을 가져와 확인하기 떄문에 만약 그것을 지우면 에러가 됨. \r\n        history(\"*\");\r\n      }else{\r\n        //즉 이곳은 user 가 웹사이트에 로그인 되어있고 뿐만아니라 verify 됬다는것을 의미 하여 setLoginData를 사용하여 현재의 logindata <- data를 집어넣어 줍니다.\r\n        console.log(\"user verified\")\r\n        setLoginData(data);\r\n        history(\"/dash\");\r\n      }\r\n  }\r\n\r\n  useEffect(() => {\r\n    DashboardValid();\r\n  })\r\n\r\n  return (\r\n    <>\r\n    <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n      <img src=\"./man.png\" style={{ width: \"200px\", marginTop: 20 }} alt=\"\" />\r\n      <h1>User Email: </h1>\r\n     </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAC7D,SAAQC,WAAW,QAAO,kBAAkB;AAC5C,SAASC,YAAY,QAAQ,2BAA2B;AAAC;AAAA;AAEzD,MAAMC,SAAS,GAAG,MAAM;EAAA;EAEtB,MAAM;IAAEC,SAAS;IAAEC;EAAa,CAAC,GAAGP,UAAU,CAACI,YAAY,CAAC;EAC5D;EACC;EACD,MAAMI,OAAO,GAAGL,WAAW,EAAE;EAE7B,MAAMM,cAAc,GAAG,YAAW;IAC9B,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IAClD;IACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;MACpCC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEN;MACnB;IACF,CAAC,CAAC;;IAEF;IACA,MAAMO,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,EAAE;IAC7BC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IAEjB,IAAGA,IAAI,CAACI,MAAM,KAAK,GAAG,IAAI,CAACJ,IAAI,EAAC;MAC9BE,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCZ,OAAO,CAAC,GAAG,CAAC;IACd,CAAC,MAAI;MACH;MACAW,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5Bb,YAAY,CAACU,IAAI,CAAC;MAClBT,OAAO,CAAC,OAAO,CAAC;IAClB;EACJ,CAAC;EAEDP,SAAS,CAAC,MAAM;IACdQ,cAAc,EAAE;EAClB,CAAC,CAAC;EAEF,oBACE;IAAA,uBACA;MAAK,KAAK,EAAE;QAAEa,OAAO,EAAE,MAAM;QAAEC,aAAa,EAAE,QAAQ;QAAEC,UAAU,EAAE;MAAS,CAAE;MAAA,wBAC7E;QAAK,GAAG,EAAC,WAAW;QAAC,KAAK,EAAE;UAAEC,KAAK,EAAE,OAAO;UAAEC,SAAS,EAAE;QAAG,CAAE;QAAC,GAAG,EAAC;MAAE;QAAA;QAAA;QAAA;MAAA,QAAG,eACxE;QAAA,UAAI;MAAY;QAAA;QAAA;QAAA;MAAA,QAAK;IAAA;MAAA;MAAA;MAAA;IAAA;EAChB,iBACJ;AAEP,CAAC;AAAA,GA7CKrB,SAAS;EAAA,QAKGF,WAAW;AAAA;AAAA,KALvBE,SAAS;AA+Cf,eAAeA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}