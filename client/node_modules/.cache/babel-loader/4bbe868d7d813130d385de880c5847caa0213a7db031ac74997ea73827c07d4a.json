{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryang\\\\OneDrive\\\\Desktop\\\\New Folder\\\\capstone\\\\BodyNSoulFirness\\\\client\\\\src\\\\components\\\\Appointment\\\\Appointment.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { LoginContext } from '../ContextProvider/Context';\nimport FullCalendar from '@fullcalendar/react'; // must go before plugins\nimport dayGridPlugin from '@fullcalendar/daygrid'; // a plugin!\nimport AddEventModal from './AddEventModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Appoinment = () => {\n  _s();\n  const [data, setData] = useState(false);\n  const {\n    logindata,\n    setLoginData\n  } = useContext(LoginContext);\n  //console.log(logindata.ValidUserOne.email);\n  //useNavigate는 양식이 제출되거나 특정 event가 발생할 때,  url을 조작할 수 있는 interface를 제공합니다.\n  const history = useNavigate();\n  const AppointmentValid = async () => {\n    let token = sessionStorage.getItem(\"usersdatatoken\");\n    const res = await fetch(\"/validuser\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      }\n    });\n    //가져온 response data를 json화 하여 data에 저장합니다.\n    const data = await res.json();\n    //console.log(data.ValidUserOne.role);\n\n    if (data.status === 401 || !data) {\n      // => localStorage의 usersdatatoken을 가져와 확인하기 떄문에 만약 그것을 지우면 에러가 됨. \n      history(\"*\");\n    } else {\n      setLoginData(data);\n      history(\"/appointment\");\n    }\n  };\n  const [modalOpen, setModalOpen] = useState(false);\n  const calendarRef = useRef(null);\n  const onEventAdded = event => {\n    let calendarApi = calendarRef.current.getApi();\n    calendarApi.addEvent(event);\n  };\n  useEffect(() => {\n    setTimeout(() => {\n      AppointmentValid();\n      setData(true);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setModalOpen(true),\n      children: \"Add Appoinment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n      ref: calendarRef,\n      plugins: [dayGridPlugin],\n      initialView: \"dayGridMonth\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AddEventModal, {\n      isOpen: modalOpen,\n      onClose: () => setModalOpen(false),\n      onEventAdded: event => onEventAdded(event)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Appoinment, \"oaGkZG/WBGLF2oQ+LfpwmxYH2Mc=\", false, function () {\n  return [useNavigate];\n});\n_c = Appoinment;\nexport default Appoinment;\nvar _c;\n$RefreshReg$(_c, \"Appoinment\");","map":{"version":3,"names":["React","useRef","useContext","useEffect","useState","useNavigate","LoginContext","FullCalendar","dayGridPlugin","AddEventModal","Appoinment","data","setData","logindata","setLoginData","history","AppointmentValid","token","sessionStorage","getItem","res","fetch","method","headers","json","status","modalOpen","setModalOpen","calendarRef","onEventAdded","event","calendarApi","current","getApi","addEvent","setTimeout"],"sources":["C:/Users/ryang/OneDrive/Desktop/New Folder/capstone/BodyNSoulFirness/client/src/components/Appointment/Appointment.js"],"sourcesContent":["import React, { useRef, useContext, useEffect ,useState} from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { LoginContext } from '../ContextProvider/Context';\r\nimport FullCalendar from '@fullcalendar/react' // must go before plugins\r\nimport dayGridPlugin from '@fullcalendar/daygrid' // a plugin!\r\nimport AddEventModal from './AddEventModal';\r\n\r\n\r\nconst Appoinment = () => {\r\n\r\n  const [data, setData] = useState(false);\r\n\r\n  const { logindata, setLoginData } = useContext(LoginContext);\r\n  //console.log(logindata.ValidUserOne.email);\r\n   //useNavigate는 양식이 제출되거나 특정 event가 발생할 때,  url을 조작할 수 있는 interface를 제공합니다.\r\n  const history = useNavigate();\r\n\r\n  const AppointmentValid = async () => {\r\n    let token = sessionStorage.getItem(\"usersdatatoken\");\r\n\r\n    const res = await fetch(\"/validuser\", {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": token\r\n        }\r\n    });\r\n      //가져온 response data를 json화 하여 data에 저장합니다.\r\n      const data = await res.json();\r\n      //console.log(data.ValidUserOne.role);\r\n\r\n      if(data.status === 401 || !data){\r\n        // => localStorage의 usersdatatoken을 가져와 확인하기 떄문에 만약 그것을 지우면 에러가 됨. \r\n        history(\"*\");\r\n      } else {\r\n        setLoginData(data)\r\n            history(\"/appointment\");\r\n      }\r\n  }\r\n\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  const calendarRef = useRef(null)\r\n  const onEventAdded = (event) => {\r\n\r\n    let calendarApi = calendarRef.current.getApi()\r\n    calendarApi.addEvent(event)\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      AppointmentValid();\r\n        setData(true)\r\n    }, )\r\n}, [])\r\n\r\n\r\n  return (\r\n    <section>\r\n        <button onClick={() => setModalOpen(true)}>Add Appoinment</button>\r\n        <FullCalendar\r\n        ref={calendarRef}\r\n        plugins={[ dayGridPlugin ]}\r\n        initialView=\"dayGridMonth\"\r\n      />\r\n\r\n      <AddEventModal isOpen={modalOpen} onClose={() => setModalOpen(false)} onEventAdded={event => onEventAdded(event)} />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Appoinment\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACrE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAOC,YAAY,MAAM,qBAAqB,EAAC;AAC/C,OAAOC,aAAa,MAAM,uBAAuB,EAAC;AAClD,OAAOC,aAAa,MAAM,iBAAiB;AAAC;AAG5C,MAAMC,UAAU,GAAG,MAAM;EAAA;EAEvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEvC,MAAM;IAAES,SAAS;IAAEC;EAAa,CAAC,GAAGZ,UAAU,CAACI,YAAY,CAAC;EAC5D;EACC;EACD,MAAMS,OAAO,GAAGV,WAAW,EAAE;EAE7B,MAAMW,gBAAgB,GAAG,YAAY;IACnC,IAAIC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,gBAAgB,CAAC;IAEpD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;MAClCC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEN;MACrB;IACJ,CAAC,CAAC;IACA;IACA,MAAMN,IAAI,GAAG,MAAMS,GAAG,CAACI,IAAI,EAAE;IAC7B;;IAEA,IAAGb,IAAI,CAACc,MAAM,KAAK,GAAG,IAAI,CAACd,IAAI,EAAC;MAC9B;MACAI,OAAO,CAAC,GAAG,CAAC;IACd,CAAC,MAAM;MACLD,YAAY,CAACH,IAAI,CAAC;MACdI,OAAO,CAAC,cAAc,CAAC;IAC7B;EACJ,CAAC;EAED,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMwB,WAAW,GAAG3B,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM4B,YAAY,GAAIC,KAAK,IAAK;IAE9B,IAAIC,WAAW,GAAGH,WAAW,CAACI,OAAO,CAACC,MAAM,EAAE;IAC9CF,WAAW,CAACG,QAAQ,CAACJ,KAAK,CAAC;EAE7B,CAAC;EAED3B,SAAS,CAAC,MAAM;IACdgC,UAAU,CAAC,MAAM;MACfnB,gBAAgB,EAAE;MAChBJ,OAAO,CAAC,IAAI,CAAC;IACjB,CAAC,CAAG;EACR,CAAC,EAAE,EAAE,CAAC;EAGJ,oBACE;IAAA,wBACI;MAAQ,OAAO,EAAE,MAAMe,YAAY,CAAC,IAAI,CAAE;MAAA,UAAC;IAAc;MAAA;MAAA;MAAA;IAAA,QAAS,eAClE,QAAC,YAAY;MACb,GAAG,EAAEC,WAAY;MACjB,OAAO,EAAE,CAAEpB,aAAa,CAAG;MAC3B,WAAW,EAAC;IAAc;MAAA;MAAA;MAAA;IAAA,QAC1B,eAEF,QAAC,aAAa;MAAC,MAAM,EAAEkB,SAAU;MAAC,OAAO,EAAE,MAAMC,YAAY,CAAC,KAAK,CAAE;MAAC,YAAY,EAAEG,KAAK,IAAID,YAAY,CAACC,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAC5G;AAEd,CAAC;AAAA,GA9DKpB,UAAU;EAAA,QAOEL,WAAW;AAAA;AAAA,KAPvBK,UAAU;AAgEhB,eAAeA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}